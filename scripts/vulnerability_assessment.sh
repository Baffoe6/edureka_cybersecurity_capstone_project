#!/bin/bash
# Vulnerability Assessment Script for Cybersecurity Capstone Project
# This script performs comprehensive vulnerability assessment on the target

echo "=========================================="
echo "Vulnerability Assessment - E-commerce Website"
echo "=========================================="

# Check if target information is provided
if [ ! -f "../target_info.txt" ]; then
    echo "Error: target_info.txt not found!"
    echo "Please run setup.sh first and fill in target information."
    exit 1
fi

# Source target information
source ../target_info.txt

if [ -z "$TARGET_IP" ] && [ -z "$TARGET_DOMAIN" ]; then
    echo "Error: TARGET_IP or TARGET_DOMAIN must be set in target_info.txt"
    exit 1
fi

# Set target
if [ -n "$TARGET_DOMAIN" ]; then
    TARGET="$TARGET_DOMAIN"
else
    TARGET="$TARGET_IP"
fi

echo "Target: $TARGET"
echo "Starting vulnerability assessment at $(date)"
echo ""

# Create log file for this session
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="../logs/vulnerability_assessment_${TIMESTAMP}.log"
REPORT_FILE="../reports/vulnerability_assessment_${TIMESTAMP}.txt"

echo "Vulnerability Assessment Report - $TARGET" > "$REPORT_FILE"
echo "Generated: $(date)" >> "$REPORT_FILE"
echo "==========================================" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 1. Web Application Vulnerability Scanning
echo "1. Web Application Vulnerability Scanning"
echo "=========================================="
echo "1. Web Application Vulnerability Scanning" >> "$REPORT_FILE"
echo "==========================================" >> "$REPORT_FILE"

# OWASP Top 10 vulnerabilities check
echo "Checking for OWASP Top 10 vulnerabilities..."

# A01: Broken Access Control
echo "A01: Broken Access Control" >> "$REPORT_FILE"
echo "Checking for directory traversal and unauthorized access..." >> "$REPORT_FILE"
echo "Directory traversal test:" >> "$REPORT_FILE"
curl -s "http://$TARGET/../../../etc/passwd" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# A02: Cryptographic Failures
echo "A02: Cryptographic Failures" >> "$REPORT_FILE"
echo "Checking SSL/TLS configuration..." >> "$REPORT_FILE"
sslscan "$TARGET" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# A03: Injection
echo "A03: Injection" >> "$REPORT_FILE"
echo "Checking for SQL injection vulnerabilities..." >> "$REPORT_FILE"
sqlmap -u "http://$TARGET" --batch --crawl=2 --level=3 --risk=2 >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# A04: Insecure Design
echo "A04: Insecure Design" >> "$REPORT_FILE"
echo "Checking for insecure design patterns..." >> "$REPORT_FILE"
# Check for default credentials
echo "Testing default credentials:" >> "$REPORT_FILE"
hydra -L ../wordlists/common_users.txt -P ../wordlists/common_passwords.txt "$TARGET" http-post-form "/login:username=^USER^&password=^PASS^:Invalid" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# A05: Security Misconfiguration
echo "A05: Security Misconfiguration" >> "$REPORT_FILE"
echo "Checking for security misconfigurations..." >> "$REPORT_FILE"
# Check for sensitive files
echo "Checking for sensitive files:" >> "$REPORT_FILE"
for file in phpinfo.php info.php test.php backup.sql database.sql config.php; do
    curl -s -o /dev/null -w "%{http_code}" "http://$TARGET/$file" >> "$REPORT_FILE" 2>&1
    echo " - $file" >> "$REPORT_FILE"
done
echo "" >> "$REPORT_FILE"

# A06: Vulnerable Components
echo "A06: Vulnerable Components" >> "$REPORT_FILE"
echo "Checking for vulnerable components..." >> "$REPORT_FILE"
whatweb -a 3 "http://$TARGET" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# A07: Authentication Failures
echo "A07: Authentication Failures" >> "$REPORT_FILE"
echo "Testing authentication mechanisms..." >> "$REPORT_FILE"
# Check for weak authentication
echo "Testing for weak authentication:" >> "$REPORT_FILE"
# Test common login pages
for page in login admin panel dashboard; do
    echo "Testing $page page:" >> "$REPORT_FILE"
    curl -s "http://$TARGET/$page" >> "$REPORT_FILE" 2>&1
    echo "" >> "$REPORT_FILE"
done

# A08: Software and Data Integrity Failures
echo "A08: Software and Data Integrity Failures" >> "$REPORT_FILE"
echo "Checking for integrity failures..." >> "$REPORT_FILE"
# Check for file upload vulnerabilities
echo "Checking for file upload functionality:" >> "$REPORT_FILE"
curl -s "http://$TARGET/upload" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# A09: Logging and Monitoring Failures
echo "A09: Logging and Monitoring Failures" >> "$REPORT_FILE"
echo "Checking logging and monitoring..." >> "$REPORT_FILE"
# Check for error pages that might leak information
echo "Testing error pages:" >> "$REPORT_FILE"
curl -s "http://$TARGET/nonexistent" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# A10: Server-Side Request Forgery
echo "A10: Server-Side Request Forgery" >> "$REPORT_FILE"
echo "Checking for SSRF vulnerabilities..." >> "$REPORT_FILE"
# Test for SSRF in common parameters
echo "Testing for SSRF in common parameters:" >> "$REPORT_FILE"
curl -s "http://$TARGET/?url=http://localhost" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# 2. Network Vulnerability Scanning
echo "2. Network Vulnerability Scanning"
echo "=================================="
echo "2. Network Vulnerability Scanning" >> "$REPORT_FILE"
echo "==================================" >> "$REPORT_FILE"

# Nmap vulnerability scan
echo "Running comprehensive nmap vulnerability scan..."
echo "Nmap vulnerability scan results:" >> "$REPORT_FILE"
nmap --script vuln "$TARGET" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# 3. Password Attacks
echo "3. Password Attack Testing"
echo "========================="
echo "3. Password Attack Testing" >> "$REPORT_FILE"
echo "=========================" >> "$REPORT_FILE"

# Create common passwords wordlist
echo "admin
password
123456
123456789
qwerty
abc123
password123
admin123
root
toor
guest
user
test
demo
default" > ../wordlists/common_passwords.txt

# Create common usernames wordlist
echo "admin
administrator
root
user
guest
test
demo
admin
manager
support
webmaster
operator
service
system" > ../wordlists/common_users.txt

echo "Testing common credentials..." >> "$REPORT_FILE"
hydra -L ../wordlists/common_users.txt -P ../wordlists/common_passwords.txt "$TARGET" http-post-form "/login:username=^USER^&password=^PASS^:Invalid" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# 4. Directory and File Enumeration
echo "4. Directory and File Enumeration"
echo "================================="
echo "4. Directory and File Enumeration" >> "$REPORT_FILE"
echo "=================================" >> "$REPORT_FILE"

# Comprehensive directory enumeration
echo "Running comprehensive directory enumeration..."
echo "Directory enumeration results:" >> "$REPORT_FILE"

# Use multiple tools for comprehensive coverage
echo "Gobuster scan:" >> "$REPORT_FILE"
gobuster dir -u "http://$TARGET" -w ../wordlists/filelist.txt -x php,html,asp,jsp >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

echo "Dirb scan:" >> "$REPORT_FILE"
dirb "http://$TARGET" ../wordlists/filelist.txt >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# 5. Technology-Specific Testing
echo "5. Technology-Specific Testing"
echo "=============================="
echo "5. Technology-Specific Testing" >> "$REPORT_FILE"
echo "==============================" >> "$REPORT_FILE"

# Detect web technologies
echo "Detecting web technologies..." >> "$REPORT_FILE"
whatweb -a 3 "http://$TARGET" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# PHP-specific tests
echo "PHP-specific vulnerability tests:" >> "$REPORT_FILE"
echo "Testing for PHP vulnerabilities..." >> "$REPORT_FILE"
curl -s "http://$TARGET/phpinfo.php" >> "$REPORT_FILE" 2>&1
curl -s "http://$TARGET/info.php" >> "$REPORT_FILE" 2>&1
echo "" >> "$REPORT_FILE"

# 6. Summary and Recommendations
echo "6. Vulnerability Summary"
echo "========================"
echo "6. Vulnerability Summary" >> "$REPORT_FILE"
echo "========================" >> "$REPORT_FILE"

echo "Vulnerability assessment completed at $(date)" >> "$REPORT_FILE"
echo "Log file: $LOG_FILE" >> "$REPORT_FILE"
echo "Report file: $REPORT_FILE" >> "$REPORT_FILE"

echo ""
echo "Vulnerability assessment completed!"
echo "Report saved to: $REPORT_FILE"
echo "Log saved to: $LOG_FILE"
echo ""
echo "Next steps:"
echo "1. Review the vulnerability assessment report"
echo "2. Prioritize vulnerabilities by risk level"
echo "3. Run exploitation script: ./scripts/exploitation.sh"
echo "4. Document findings for final report"
echo ""
echo "=========================================="
